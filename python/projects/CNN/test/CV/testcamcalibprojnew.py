"""
Script to test calibrate camera
Testing file generated by testcambalibnew.py
"""

from tkinter import Tk
from tkinter.filedialog import askopenfilename
import os.path
import cv2
import numpy as np
import json
from classutils import ClassUtils
from timeit import default_timer as timer
from sys import platform

dict_config = {}


def main():
    global dict_config

    print('Initializing main function')
    text = input('Insert camera number: ')

    dict_config = ClassUtils.load_cam_calib_params(text)

    print('Opening file')

    # Problems in windows version
    # Tk().withdraw()

    print('Generating elements in list')

    init_dir = '/home/mauricio/Oviedo/CameraCalibration/' + text
    if platform == 'win32':
        init_dir = 'C:\\SharedFTP\\CameraCalibration\\' + text

    options = {'initialdir': init_dir}
    filename = askopenfilename(**options)

    if not filename:
        print('File not selected')
    else:
        print('Loading file ' + filename)

        image = cv2.imread(filename)

        if image is None:
            print('Cant read image ' + filename)
        else:
            show_image(image)


def show_image(image: np.ndarray):
    global dict_config

    print('Drawing points')

    image_points = dict_config['imagePoints']
    for point in image_points:
        x = int(point[0])
        y = int(point[1])

        radius = 5
        red = (0, 0, 255)
        cv2.rectangle(image, (x - radius, y - radius), (x + radius, y + radius), red, cv2.FILLED)

    print('Showing image')

    cv2.namedWindow('image')
    cv2.setMouseCallback('image', mouse_callback)
    cv2.imshow('image', image)
    print('Press any key to exit')
    cv2.waitKey(0)


def mouse_callback(event, x_image, y_image, flags, param):
    global dict_config

    if event == cv2.EVENT_LBUTTONDOWN:
        print('Event click - Evaluating elems ' + str(x_image) + ' ' + str(y_image))

        homo_mat = np.asarray(dict_config['homographyMat'], dtype='float')
        point = np.float32([x_image, y_image, 1])
        center_point = np.float32(dict_config['centerPoints'])
        angle_degrees = dict_config['angleDegrees']

        print('Center point: {0}'.format(center_point))
        start = timer()
        result = ClassUtils.project_points_angle(homo_mat, point, center_point, angle_degrees)
        end = timer()

        print(result)
        print('Elapsed calc time: {0}'.format(end - start))
        print('Done')


if __name__ == '__main__':
    main()
