/*
 * ClassOpenPose.cpp
 *
 *  Created on: Feb 3, 2018
 *      Author: mauricio
 */

#include "ClassOpenPose.h"

ClassOpenPose::ClassOpenPose() {
	// TODO Auto-generated constructor stub

}

ClassOpenPose::~ClassOpenPose() {
	// TODO Auto-generated destructor stub
}

void ClassOpenPose::InitOpenPose() {
	  op::log("Detecting elements!!!");

	    // Step 1 - Set logging level
	    // - 0 will output all the logging messages
	    // - 255 will output nothing
	    op::check(0 <= FLAGS_logging_level && FLAGS_logging_level <= 255, "Wrong logging_level value.", __LINE__, __FUNCTION__, __FILE__);
	    op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);
	    op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);

	    // Step 2 - Read Google flags (user defined configuration)
	    // outputSize
	    const auto outputSize = op::flagsToPoint(FLAGS_output_resolution, "-1x-1");
	    // netInputSize
	    const auto netInputSize = op::flagsToPoint(FLAGS_net_resolution, "-1x368");
	    // poseModel
	    const auto poseModel = op::flagsToPoseModel(FLAGS_model_pose);

	    // Check no contradictory flags enabled
	    if (FLAGS_alpha_pose < 0. || FLAGS_alpha_pose > 1.)
	        op::error("Alpha value for blending must be in the range [0,1].",
	                  __LINE__, __FUNCTION__, __FILE__);

	    if (FLAGS_scale_gap <= 0. && FLAGS_scale_number > 1)
	        op::error("Incompatible flag configuration: scale_gap must be greater than 0 or scale_number = 1.",
	                  __LINE__, __FUNCTION__, __FILE__);

	    // Logging
	    op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);

	    // Step 3 - Initialize all required classes
	    op::ScaleAndSizeExtractor scaleAndSizeExtractor(netInputSize, outputSize, FLAGS_scale_number, FLAGS_scale_gap);
	    op::CvMatToOpInput cvMatToOpInput;
	    op::CvMatToOpOutput cvMatToOpOutput;
	    op::PoseExtractorCaffe poseExtractorCaffe{poseModel, FLAGS_model_folder, FLAGS_num_gpu_start};
	    op::PoseCpuRenderer poseRenderer{poseModel, (float)FLAGS_render_threshold, !FLAGS_disable_blending,
	                                     (float)FLAGS_alpha_pose};

	    op::OpOutputToCvMat opOutputToCvMat;
	    op::FrameDisplayer frameDisplayer{"OpenPose Tutorial - Example 1", outputSize};

	    // Step 4 - Initialize resources on desired thread (in this case single thread, i.e. we init resources here)
	    poseExtractorCaffe.initializationOnThread();
	    poseRenderer.initializationOnThread();
}
