/*
 * ClassMain.cpp
 *
 *  Created on: Feb 4, 2018
 *      Author: mauricio
 */

#include "ClassMain.h"

using namespace std;
using namespace cv;

ClassMain::ClassMain() {
	// TODO Auto-generated constructor stub

}

ClassMain::~ClassMain() {
	// TODO Auto-generated destructor stub
}


void ClassMain::InitProcess(int argc, char** argv) {
	cout << "Initializing process" << endl;

	int response = 0;
	while (true) {
		cout << "Select case" << endl;
		cout << "1: ShowKeyPoints" << endl;
		cout << "2: SelectKeyPoints" << endl;
		cout << "3: Person re-identification" << endl;
		cout << "4: Extract key poses descriptors" << endl;

		cin >> response;

		if (response < 1 || response > 4) {
			cout << "You must insert a number between 1 and 4" << endl;
		} else {
			break;
		}
	}

	switch (response) {
		case 1: {
			ProcessKeyPoints(argc, argv);
			break;
		}
		case 2: {
			ShowKeyPoints(argc, argv);
			break;
		}
		case 3: {
			PersonReidentification(argc, argv);
			break;
		}
		case 4: {
			ExtractKeyPosesDescriptor(argc, argv);
			break;
		}
		default: {
			cout << "Response invalid!" << endl;
		}
	}
}

void ClassMain::ProcessKeyPoints(int argc, char** argv) {
	cout << "ProcessKeyPoints" << endl;

	ClassOpenPose poseDetector;

	cout << "Initializing" << endl;
	poseDetector.InitOpenPose();

	string imagePath = defaultImage;

	if (argc > 2) {
		imagePath = string(argv[1]);
	}

	cout << "ImagePath: " << imagePath << endl;

	Mat image1 = imread(imagePath);

	cout << "Extracting data" << endl;
	poseDetector.ExtractAndShow(image1);

	cout << "ProcessKeyPoints finished" << endl;
}

void ClassMain::ShowKeyPoints(int argc, char** argv) {
	cout << "ShowKeyPoints" << endl;

	ClassOpenPose poseDetector;

	cout << "Initializing" << endl;
	poseDetector.InitOpenPose();

	string imagePath = defaultImage;

	if (argc > 2) {
		imagePath = string(argv[1]);
	}

	cout << "ImagePath: " << imagePath << endl;

	Mat image1 = imread(imagePath);

	cout << "Extracting data" << endl;
	auto results = poseDetector.ExtractKeyPoints(image1);
	auto listElems = results.GetAllPoints();

	cout << "List elements count: " << listElems.size() << endl;
	for (uint i = 0; i < listElems.size(); i++) {
		auto item = listElems[i];
		cout << "Person: " << item.person << " BodyPart: " << item.bodyPart << " x: "  << item.x
				<< " y: " << item.y << " score: " << item.score << endl;

		cv::Point pointInit;
		pointInit.x = item.x - rectSize / 2;
		pointInit.y = item.y - rectSize / 2;

		cv::Point pointEnd;
		pointEnd.x = item.x + rectSize / 2;
		pointEnd.y = item.y + rectSize / 2;

		cv::rectangle(image1, pointInit, pointEnd, cv::Scalar(255, 0, 0));
	}

	cout << "Showing image" << endl;
	cv::namedWindow("winMain", CV_WINDOW_AUTOSIZE);
	cv::imshow("winMain", image1);
	cv::waitKey(0);

	cout << "Process Finished!" << endl;
}

void ClassMain::PersonReidentification(int argc, char** argv) {
	cout << "Person re-identification run" << endl;

	ClassOpenPose poseDetector;
	poseDetector.InitOpenPose();

	cout << "Loading images" << endl;
	cout << "Image1 Path: " << defaultCompareImage1 << endl;
	cout << "Image2 Path: " << defaultCompareImage2 << endl;

	cv::Mat image1 = imread(defaultCompareImage1);
	cv::Mat image2 = imread(defaultCompareImage2);

	cout << "Extract points from image" << endl;

	auto results1 = poseDetector.ExtractKeyPoints(image1);
	auto results2 = poseDetector.ExtractKeyPoints(image2);

	if (results1.GetPeopleAmount() != 1) {
		cout << "People number from image1 is not 1" << endl;
	} else if (results2.GetPeopleAmount() != 1) {
		cout << "People number from image2 is not 1" << endl;
	} else {
		// Right elbow - 3
		// Left elbow - 4
		// Right knee - 9
		// Left knee - 12

		auto pose1RU = results1.GetPose(0, 3);
		auto pose1LU = results1.GetPose(0, 6);

		auto pose2RU = results2.GetPose(0, 3);
		auto pose2LU = results2.GetPose(0, 6);

		double color1U = GetColorPoses(image1, pose1RU, pose1LU);
		double color2U = GetColorPoses(image2, pose2RU, pose2LU);

		cout << endl;
		if (color1U == -1) {
			cout << "Image1 upper ignored" << endl;
		} else if (color2U == -1) {
			cout << "Image2 upper ignored" << endl;
		} else {
			cout << "Color1U " << color1U << endl;
			cout << "Color2U " << color2U << endl;
			cout << endl;
		}

		auto pose1RD = results1.GetPose(0, 9);
		auto pose1LD = results1.GetPose(0, 12);

		auto pose2RD = results2.GetPose(0, 9);
		auto pose2LD = results2.GetPose(0, 12);

		double color1D = GetColorPoses(image1, pose1RD, pose1LD);
		double color2D = GetColorPoses(image2, pose2RD, pose2LD);

		if (color1D == -1) {
			cout << "Image1 lower ignored" << endl;
		} else if (color2D == -1) {
			cout << "Image2 lower ignored" << endl;
		} else {
			cout << "Color1D " << color1D << endl;
			cout << "Color2D " << color2D << endl;
			cout << endl;
		}

		cout << "Program finished successfully" << endl;
	}
}

double ClassMain::GetColorPoses(cv::Mat image, StructPoints pose1, StructPoints pose2) {
	double result = 0;
	int count = 0;

	if (pose1.score >= scoreThresh) {
		cv::Rect rectangle(pose1.x - rectSize / 2, pose1.y - rectSize / 2, rectSize, rectSize);
		auto color = ImageProcess::GetAverageColor(image, rectangle);

		result += color;
		count++;
	}

	if (pose2.score >= 0.5) {
		cv::Rect rectangle(pose2.x - rectSize / 2, pose2.y - rectSize / 2, rectSize, rectSize);
		auto color = ImageProcess::GetAverageColor(image, rectangle);

		result += color;
		count++;
	}

	if (count == 0) {
		result = -1;
	} else {
		result = result / count;
	}

	return result;

}

void ClassMain::ExtractKeyPosesDescriptor(int argc, char** argv) {
	// Based on Weizzman dataset

	auto videoFile = "/home/mauricio/Videos/Datasets/Weizzman/walk/daria_walk.avi";

	cout << "Opening video file" << endl;
	auto listImages = ImageProcess::GetImagesFromVideo(videoFile);
	cout << "Total image length: " << listImages.size() << endl;

	cout << "Extracting poses" << endl;
	ClassOpenPose poseDetector;

	cvNamedWindow("Window", CV_WINDOW_AUTOSIZE);
	for (uint i = 0; i < listImages.size(); i++) {
		auto image = listImages.at(i);
		auto results = poseDetector.ExtractKeyPoints(image);

		for (uint j = 0; j < results.GetPeopleAmount(); j++) {
			auto parts = results.GetAllPointsByPerson(j);

			for (uint k = 0; k < parts.size(); k++) {
				cout << parts.at(k).bodyPart << endl;
			}


		}

		imshow("Window", image);
		cvWaitKey(100);
		break;
	}
	cvDestroyWindow("Window");

	cout << "Routine executed" << endl;
}
