/*
 * ClassMain.cpp
 *
 *  Created on: Feb 4, 2018
 *      Author: mauricio
 */

#include "ClassMain.h"

using namespace std;
using namespace cv;

ClassMain::ClassMain() {
	// TODO Auto-generated constructor stub

}

ClassMain::~ClassMain() {
	// TODO Auto-generated destructor stub
}


void ClassMain::InitProcess(int argc, char** argv) {
	cout << "Init process" << endl;

	int response = 0;
	while (true) {
		cout << "Select case" << endl;
		cout << "1: ShowKeyPoints" << endl;
		cout << "2: SelectKeyPoints" << endl;
		cout << "3: Person re-identification" << endl;

		cin >> response;

		if (response < 1 || response > 2) {
			cout << "You must insert a number between 1 and 2" << endl;
		} else {
			break;
		}
	}

	switch (response) {
		case 1: {
			ProcessKeyPoints(argc, argv);
			break;
		}
		case 2: {
			ShowKeyPoints(argc, argv);
			break;
		}
		case 3: {
			PersonReidentification(argc, argv);
			break;
		}
		default: {
			cout << "Response invalid!" << endl;
		}
	}
}

void ClassMain::ProcessKeyPoints(int argc, char** argv) {
	cout << "ProcessKeyPoints" << endl;

	ClassOpenPose poseDetector;

	cout << "Initializing" << endl;
	poseDetector.InitOpenPose();

	string imagePath = defaultImage;

	if (argc > 2) {
		imagePath = string(argv[1]);
	}

	cout << "ImagePath: " << imagePath << endl;

	Mat image1 = imread(imagePath);

	cout << "Extracting data" << endl;
	poseDetector.ExtractAndShow(image1);

	cout << "ProcessKeyPoints finished" << endl;
}

void ClassMain::ShowKeyPoints(int argc, char** argv) {
	cout << "ShowKeyPoints" << endl;

	ClassOpenPose poseDetector;

	cout << "Initializing" << endl;
	poseDetector.InitOpenPose();

	string imagePath = defaultImage;

	if (argc > 2) {
		imagePath = string(argv[1]);
	}

	cout << "ImagePath: " << imagePath << endl;

	Mat image1 = imread(imagePath);

	cout << "Extracting data" << endl;
	auto results = poseDetector.ExtractKeyPoints(image1);
	auto listElems = results.GetAllPoints();

	cout << "List elements count: " << listElems.size() << endl;
	for (uint i = 0; i < listElems.size(); i++) {
		auto item = listElems[i];
		cout << "Person: " << item.person << " BodyPart: " << item.bodyPart << " x: "  << item.x
				<< " y: " << item.y << " score: " << item.score << endl;

		cv::Point pointInit;
		pointInit.x = item.x - 5;
		pointInit.y = item.y - 5;

		cv::Point pointEnd;
		pointEnd.x = item.x + 5;
		pointEnd.y = item.y + 5;

		cv::rectangle(image1, pointInit, pointEnd, cv::Scalar(255, 0, 0));
	}

	cout << "Showing image" << endl;
	cv::namedWindow("winMain", CV_WINDOW_AUTOSIZE);
	cv::imshow("winMain", image1);
	cv::waitKey(0);

	cout << "Process Finished!" << endl;
}

void ClassMain::PersonReidentification(int argc, char** argv) {
	cout << "Person re-identification run" << endl;

	ClassOpenPose poseDetector;
	poseDetector.InitOpenPose();

	cout << "Loading images" << endl;
	cout << "Image1 Path: " << defaultCompareImage1 << endl;
	cout << "Image2 Path: " << defaultCompareImage2 << endl;

	cv::Mat image1 = imread(defaultCompareImage1);
	cv::Mat image2 = imread(defaultCompareImage2);

	cout << "Extract points from image" << endl;

	auto listPoints1 = poseDetector.ExtractKeyPoints(image1);
	auto listPoints2 = poseDetector.ExtractKeyPoints(image2);

}
