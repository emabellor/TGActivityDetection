#ifndef IMAGEPROCESS_H
#define IMAGEPROCESS_H

#include <vector>

// OpenCV includes
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <vector>

// Standard includes
#include <iostream>
#include <vector>

class FrameInfo {
public:
	const int MAX_SIZE = 1 * 1024 * 1024; // Fixed Length - Avoid realocating memory continuously

	unsigned char image [MAX_SIZE];
	int len;
	bool isEmpty;

	FrameInfo() {
		isEmpty = false;
		len = 0;
	}

	void LoadFromVector(std::vector<uchar> buff) {
		if (buff.size() > MAX_SIZE) {
			std::err << "Image size exceeded max size " << MAX_SIZE << ". Aborting" << std::err;
			exit(1);
		}

		std::copy(buff.begin(), buff.end(), image);
		len = buff.size();
	}
};


class ImageProcess {
public:
    ImageProcess();

    //Static functions
    static cv::Mat Erode(cv::Mat image, int shape = cv::MORPH_RECT); //Shapes: MORPH_RECT, MORPH_CROSS, MORPH_ELLIPSE
    static cv::Mat Dilate(cv::Mat image, int shape = cv::MORPH_RECT); //Shapes: MORPH_RECT, MORPH_CROSS, MORPH_ELLIPSE
    static cv::Mat Threshold(cv::Mat image, double threshValue, int type = cv::THRESH_BINARY); //Types: THRESH_BINARY, THRESH_BINARY_INV, THRESH_TRUNC, THRESH_TOZERO, THRESH_TOZERO_INV
    static cv::Mat Grayscale(cv::Mat image);
    static cv::Mat Blur(cv::Mat image);
    static cv::Mat BlurGaussian(cv::Mat image);
    static cv::Mat HistEqualization(cv::Mat image);
    static cv::Mat GetFromCharBuffer(unsigned char* buffer, int len);
    static cv::Mat Resize(cv::Mat image, CvSize size);
    static FrameInfo MatToJPEG(cv::Mat image);
    static void ShowSingleImage(cv::Mat image);
    static void ShowAndWait(cv::Mat mat);
    static double GetMean (cv::Mat mat);
    static double GetAverageColor(cv::Mat mat, cv::Rect region);
    static std::vector<cv::Mat> GetImagesFromVideo(std::string videoPath);

private:
    static const int EROSION_SIZE;
    static const int DILATION_SIZE;

};

#endif // IMAGEPROCESS_H
