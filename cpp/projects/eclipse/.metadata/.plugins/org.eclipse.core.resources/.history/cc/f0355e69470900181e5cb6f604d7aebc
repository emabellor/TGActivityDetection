/*
 * ClassOpenPose.cpp
 *
 *  Created on: Feb 3, 2018
 *      Author: mauricio
 */

#include "ClassOpenPose.h"

#include <gflags/gflags.h>

// Allow Google Flags in Ubuntu 14
#ifndef GFLAGS_GFLAGS_H_
    namespace gflags = google;
#endif

// OpenCV dependencies
#include <opencv2/highgui/highgui.hpp>

// OpenPose dependencies
#include <openpose/core/headers.hpp>
#include <openpose/filestream/headers.hpp>
#include <openpose/gui/headers.hpp>
#include <openpose/pose/headers.hpp>
#include <openpose/utilities/headers.hpp>
#include <iostream>


ClassOpenPose::ClassOpenPose() {
	// TODO Auto-generated constructor stub

}

ClassOpenPose::~ClassOpenPose() {
	// TODO Auto-generated destructor stub
}

void ClassOpenPose::InitOpenPose() {
	op::log("Initializing open pose");

	// Step 1 - Set logging level
	// - 0 will output all the logging messages
	// - 255 will output nothing
	op::check(0 <= logging_level && logging_level <= 255, "Wrong logging_level value.", __LINE__, __FUNCTION__, __FILE__);
	op::ConfigureLog::setPriorityThreshold((op::Priority)logging_level);
	op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);

	// Step 2 - Read Google flags (user defined configuration)
	// outputSize
	const auto outputSize = op::flagsToPoint(output_resolution, "-1x-1");
	// netInputSize
	const auto netInputSize = op::flagsToPoint(net_resolution, "-1x368");
	// poseModel
	const auto poseModel = op::flagsToPoseModel(model_pose);

	// Check no contradictory flags enabled
	if (alpha_pose < 0. || alpha_pose > 1.)
		op::error("Alpha value for blending must be in the range [0,1].",
				  __LINE__, __FUNCTION__, __FILE__);

	if (scale_gap <= 0. && scale_number > 1)
		op::error("Incompatible flag configuration: scale_gap must be greater than 0 or scale_number = 1.",
				  __LINE__, __FUNCTION__, __FILE__);

	// Logging
	op::log("", op::Priority::Low, __LINE__, __FUNCTION__, __FILE__);

	// Step 3 - Initialize all required classes
	op::ScaleAndSizeExtractor scaleAndSizeExtractor(netInputSize, outputSize, scale_number, scale_gap);
	op::CvMatToOpInput cvMatToOpInput;
	op::CvMatToOpOutput cvMatToOpOutput;
	op::PoseExtractorCaffe poseExtractorCaffe{poseModel, model_folder, num_gpu_start};

	op::PoseCpuRenderer poseRenderer{poseModel, (float)render_threshold, !disable_blending, (float)alpha_pose};

	op::OpOutputToCvMat opOutputToCvMat;
	op::FrameDisplayer frameDisplayer{"OpenPose Tutorial - Example 1", outputSize};

	// Step 4 - Initialize resources on desired thread (in this case single thread, i.e. we init resources here)
	poseExtractorCaffe.initializationOnThread();
	poseRenderer.initializationOnThread();
}
