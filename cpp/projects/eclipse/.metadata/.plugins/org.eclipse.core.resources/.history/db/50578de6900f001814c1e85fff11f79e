/*
 * ClassWrapper.cpp
 *
 *  Created on: Feb 11, 2018
 *      Author: mauricio
 */

#include "ClassWrapper.h"

// Must have local includes for compatibility
#include "ClassOpenPose.h"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include "ImageProcess.h"
#include <iostream>

// Struct definitions
typedef struct _JNI_RESULT {
    jclass cls;
    jmethodID constructorID;
    jfieldID personID;
    jfieldID bodyPartID;
    jfieldID xID;
    jfieldID yID;
    jfieldID scoreID;
} JNI_RESULT;


// Globals
ClassOpenPose openPose;
JNI_RESULT jniResEnv;
bool loaded = false;

// Custom Functions
void LoadJniResultEnv(JNIEnv * env) {

    if (loaded == true)
        return;

    loaded = true;

    jniResEnv = new JNI_RESULT;

    jniResEnv.cls = env->FindClass("com/test/StudentRecord");

    if(jniResEnv.cls == NULL){
    	std::cerr << "Can't find class name" << std::endl;
    	exit(1);
    } else {
    	printf("Successfully created class");

		jniResEnv.constructorID = env->GetMethodID(jniResEnv.cls, "<init>", "()V");

		if(jniResEnv.constructorID != NULL){
			std::cerr << "Can't find constructor" << std::endl;
			exit(1);
		} else {
			jniResEnv.personID = env->GetFieldID(jniResEnv.cls, "person", "I");
			jniResEnv.bodyPartID = env->GetFieldID(jniResEnv.cls, "bodyPart", "I");
			jniResEnv.xID = env->GetFieldID(jniResEnv.cls, "x", "D;");
			jniResEnv.yID = env->GetFieldID(jniResEnv.cls, "y", "D");
			jniResEnv.scoreID = env->GetFieldID(jniResEnv.cls, "score", "D");
		}
    }
}


// Defined Functions
JNIEXPORT void JNICALL Java_activitybesa_ClassWrapper_InitOpenPose(JNIEnv * env, jobject obj) {
	openPose.InitOpenPose();
	openPose.jniFlag = true;
	std::cout << "OpenPose Initialized and jni setted" << std::endl;
}


JNIEXPORT jobject JNICALL Java_activitybesa_ClassWrapper_ProcessImage(JNIEnv * env, jobject obj, jbyteArray imageBin) {
	// Conversion to unsigned char *
    int len = env->GetArrayLength(imageBin);
    unsigned char* buf = new unsigned char[len];
    env->GetByteArrayRegion (imageBin, 0, len, reinterpret_cast<jbyte*>(buf));

    // Image Processing
    cv::Mat image = ImageProcess::GetFromCharBuffer(buf, len);

    // Process
    auto results = openPose.ExtractKeyPoints(image);
    auto resultPeople = results.GetAllPoints();

    // Iterating
    LoadJniResultEnv(env);
    for (uint i = 0; i < resultPeople.size(); i++) {
    	auto elem = resultPeople.at(i);

    	// Set fields
    	jobject item = env->NewObject(jniResEnv.cls, jniResEnv.constructorID);
    	env->SetIntField(item, jniResEnv.personID, elem.person);
    	env->SetIntField(item, jniResEnv.bodyPartID, elem.bodyPart);
    	env->SetDoubleField(item, jniResEnv.xID, elem.pos.x);
    	env->SetDoubleField(item, jniResEnv.yID, elem.pos.y);
    	env->SetDoubleField(item, jniResEnv.scoreID, elem.score);


    }

    // Returning Function - C++ variants
    jclass cls = env->FindClass("activitybesa/ClassResults");
    jmethodID constructor = env->GetMethodID(cls, "<init>", "()V");

    // Set up the arguments
    jvalue args[5];
    args[0].i = 1; // Person
    args[1].i = 2; // BodyPart
    args[2].d = 0.1; // x
    args[3].d = 0.2; // y
    args[4].d = 0.5; // score

    return env->NewObjectA(cls, constructor, args);
}
